TypeScript is a superset of JavaScript that adds static typing and other features to make it easier to write, maintain, and scale applications. Understanding the compilation and runtime phases of TypeScript is crucial to grasp how it works:

TypeScript Compilation
Definition: The process of transforming TypeScript (TS) code into plain JavaScript (JS) code that can run in any JavaScript runtime environment (e.g., browsers, Node.js).
Purpose: JavaScript engines (browsers or Node.js) cannot execute TypeScript directly, so it must be compiled to JavaScript first.
Steps:
Type Checking: The TypeScript compiler (tsc) analyzes the code for type correctness based on the defined types and interfaces.
Transpilation: Converts TypeScript syntax into equivalent JavaScript syntax. This may also include polyfills for newer JS features depending on the target environment (e.g., ES5, ES6).
Output: Generates JavaScript files, along with source maps (if configured) for debugging.
Key Points:

ts compilation = Type checking(Using lib mentioned in tsconfig) + Transpilation(converting ts to js)

The TypeScript compiler does not enforce runtime type checking; it only checks types at compile time.
Any type-related errors are reported during the compilation process, not during program execution.
TypeScript Runtime
Definition: The phase where the JavaScript code (generated from TypeScript) is executed in a JavaScript runtime environment (e.g., a browser or Node.js).
Key Characteristics:
TypeScript's types are erased during compilation, so there are no type checks at runtime.
Type safety is guaranteed only at compile time; you must manually handle runtime validation if required.
Any runtime behavior depends purely on the JavaScript code generated by the TypeScript compiler.
Differences Between Compilation and Runtime
Aspect	Compilation Phase	Runtime Phase
Purpose	Converts TS into JS	Executes the JS code
Environment	TypeScript compiler (tsc)	JavaScript runtime (e.g., Node.js, browsers)
Type Checking	Enforced	Not enforced (erased during compilation)
Error Handling	Type errors are detected	Runtime errors occur only if logic fails in JS
Output	JavaScript files	Executable application
Example
TypeScript Code
typescript
Copy
Edit
function add(a: number, b: number): number {
  return a + b;
}

console.log(add(5, "10")); // Error in TS but may not fail at runtime
Compilation Output (JavaScript)
javascript
Copy
Edit
function add(a, b) {
  return a + b;
}

console.log(add(5, "10")); // No error, outputs "510"
Key Observation
Compile-time Error: "10" is a string, but the add function expects number arguments.
Runtime Behavior: The type information is erased during compilation, so the JavaScript version accepts "10" and concatenates it, resulting in "510".
Runtime Type Checking in TypeScript
To handle type-related issues at runtime, you can combine TypeScript with:

Runtime Validators: Libraries like Zod, io-ts, or class-validator.
Manual Checks: Write custom type guards or validation logic in the JavaScript output.